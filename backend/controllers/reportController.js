import multer from 'multer';
import fs from 'fs';
import Tesseract from 'tesseract.js';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Multer config for multiple image uploads
const upload = multer({ dest: 'uploads/' });
export const uploadReport = upload.array('files', 5);

// Gemini init
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-lite" });

export const analyzeReport = async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({ success: false, message: "No files uploaded." });
    }

    let allText = '';

    for (const file of req.files) {
      if (!file.mimetype.startsWith('image/')) {
        continue;
      }

      const { data: { text } } = await Tesseract.recognize(file.path, 'eng');
      const cleanText = text.trim().replace(/\s{2,}/g, ' ');
      // console.log(`Extracted text from ${file.originalname}:`, cleanText.slice(0, 200));
      allText += cleanText + '\n\n';
    }

    if (!allText) {
      return res.status(400).json({ success: false, message: "Could not extract any text from the images." });
    }

    const tableData = [];
    allText.split('\n').forEach(line => {
      if (line.includes(':')) {
        const [testName, rest] = line.split(':');
        tableData.push({
          testName: testName.trim(),
          result: rest.trim(),
          range: ''
        });
      } else if (line.includes('\t')) {
        const parts = line.split('\t');
        if (parts.length >= 2) {
          tableData.push({
            testName: parts[0].trim(),
            result: parts[1].trim(),
            range: parts[2]?.trim() || ''
          });
        }
      }
    });

    //  AI prompt to Gemini
const prompt = `
You are an experienced medical AI assistant.

Below is the raw extracted data from a medical report:
${JSON.stringify(tableData, null, 2)}

And here is the full text of the report:
${allText}

Please do the following:
1 Carefully clean and normalize the extracted data into a JSON array with this exact format:
[
  {
    "testName": "string",
    "result": "string",
    "range": "string"
  }
]

2 Explain these results in simple, patient-friendly language. Include:
- What these tests measure and what the results may mean.
- General health advice and precautions based on common interpretations.
- Lifestyle tips (diet, exercise, hydration, sleep, stress).
- Clear guidance on when the patient should consult a doctor.

At the end, always add:
"This summary was generated by AI. Always consult a licensed doctor for final interpretation."
`;


    const result = await model.generateContent(prompt);
    const aiResponse = result.response.text();

    res.json({
      success: true,
      extractedText: allText.trim(),
      extractedTests: tableData,
      aiSummary: aiResponse
    });

  } catch (err) {
    console.error('Analyze report error:', err);
    res.status(500).json({ success: false, message: "Failed to analyze report.", error: err.message });
  } finally {
    // clean up uploaded files
    if (req.files) {
      req.files.forEach(file => {
        if (fs.existsSync(file.path)) fs.unlinkSync(file.path);
      });
    }
  }
};
